
day11_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000032c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b4  080004bc  000014bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b4  080004b4  000014bc  2**0
                  CONTENTS
  4 .ARM          00000000  080004b4  080004b4  000014bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b4  080004bc  000014bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b4  080004b4  000014b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004b8  080004b8  000014b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000014bc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e49  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000420  00000000  00000000  00002335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000080  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180b7  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000140e  00000000  00000000  0001a957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b7d9  00000000  00000000  0001bd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a753e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000170  00000000  00000000  000a7584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a76f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  000a7713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800049c 	.word	0x0800049c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800049c 	.word	0x0800049c

080001c8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
    int duty = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
    SystemInit();
 80001d2:	f000 f88d 	bl	80002f0 <SystemInit>
    TimerInit();
 80001d6:	f000 f8c1 	bl	800035c <TimerInit>
    SwitchInit(SWITCH);
 80001da:	2000      	movs	r0, #0
 80001dc:	f000 f822 	bl	8000224 <SwitchInit>
    while(1) {
    	do{
    		while(SwitchGetState(SWITCH) == 0)
 80001e0:	bf00      	nop
 80001e2:	2000      	movs	r0, #0
 80001e4:	f000 f868 	bl	80002b8 <SwitchGetState>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d0f9      	beq.n	80001e2 <main+0x1a>
    			;
    		TIM8->CCR1 = duty++;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	1c5a      	adds	r2, r3, #1
 80001f2:	607a      	str	r2, [r7, #4]
 80001f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000220 <main+0x58>)
 80001f6:	6353      	str	r3, [r2, #52]	@ 0x34
    	}while(duty<=100);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b64      	cmp	r3, #100	@ 0x64
 80001fc:	ddf0      	ble.n	80001e0 <main+0x18>

    	do{
    		while(SwitchGetState(SWITCH) == 0)
 80001fe:	bf00      	nop
 8000200:	2000      	movs	r0, #0
 8000202:	f000 f859 	bl	80002b8 <SwitchGetState>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d0f9      	beq.n	8000200 <main+0x38>
    			;
    		TIM8->CCR1 = duty--;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	1e5a      	subs	r2, r3, #1
 8000210:	607a      	str	r2, [r7, #4]
 8000212:	4a03      	ldr	r2, [pc, #12]	@ (8000220 <main+0x58>)
 8000214:	6353      	str	r3, [r2, #52]	@ 0x34
    	}while(duty>=10);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b09      	cmp	r3, #9
 800021a:	dcf0      	bgt.n	80001fe <main+0x36>
    while(1) {
 800021c:	e7e0      	b.n	80001e0 <main+0x18>
 800021e:	bf00      	nop
 8000220:	40010400 	.word	0x40010400

08000224 <SwitchInit>:
 *      Author: sunbeam
 */

#include "switch.h"

void SwitchInit(uint32_t pin) {
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 800022c:	4b20      	ldr	r3, [pc, #128]	@ (80002b0 <SwitchInit+0x8c>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000230:	4a1f      	ldr	r2, [pc, #124]	@ (80002b0 <SwitchInit+0x8c>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as input (in MODER)
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000238:	4b1e      	ldr	r3, [pc, #120]	@ (80002b4 <SwitchInit+0x90>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	0052      	lsls	r2, r2, #1
 8000240:	3201      	adds	r2, #1
 8000242:	2101      	movs	r1, #1
 8000244:	4091      	lsls	r1, r2
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	0052      	lsls	r2, r2, #1
 800024a:	2001      	movs	r0, #1
 800024c:	fa00 f202 	lsl.w	r2, r0, r2
 8000250:	430a      	orrs	r2, r1
 8000252:	43d2      	mvns	r2, r2
 8000254:	4611      	mov	r1, r2
 8000256:	4a17      	ldr	r2, [pc, #92]	@ (80002b4 <SwitchInit+0x90>)
 8000258:	400b      	ands	r3, r1
 800025a:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800025c:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <SwitchInit+0x90>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	0052      	lsls	r2, r2, #1
 8000264:	3201      	adds	r2, #1
 8000266:	2101      	movs	r1, #1
 8000268:	4091      	lsls	r1, r2
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	0052      	lsls	r2, r2, #1
 800026e:	2001      	movs	r0, #1
 8000270:	fa00 f202 	lsl.w	r2, r0, r2
 8000274:	430a      	orrs	r2, r1
 8000276:	43d2      	mvns	r2, r2
 8000278:	4611      	mov	r1, r2
 800027a:	4a0e      	ldr	r2, [pc, #56]	@ (80002b4 <SwitchInit+0x90>)
 800027c:	400b      	ands	r3, r1
 800027e:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000280:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <SwitchInit+0x90>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	0052      	lsls	r2, r2, #1
 8000288:	3201      	adds	r2, #1
 800028a:	2101      	movs	r1, #1
 800028c:	4091      	lsls	r1, r2
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	2001      	movs	r0, #1
 8000294:	fa00 f202 	lsl.w	r2, r0, r2
 8000298:	430a      	orrs	r2, r1
 800029a:	43d2      	mvns	r2, r2
 800029c:	4611      	mov	r1, r2
 800029e:	4a05      	ldr	r2, [pc, #20]	@ (80002b4 <SwitchInit+0x90>)
 80002a0:	400b      	ands	r3, r1
 80002a2:	60d3      	str	r3, [r2, #12]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40020000 	.word	0x40020000

080002b8 <SwitchGetState>:

int SwitchGetState(uint32_t pin) {
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	// read gpio pin
	uint32_t state = SWITCH_GPIO->IDR;
 80002c0:	4b0a      	ldr	r3, [pc, #40]	@ (80002ec <SwitchGetState+0x34>)
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	60fb      	str	r3, [r7, #12]
	// return 1 if pin in high, otherwise return 0
	if(state & BV(pin))
 80002c6:	2201      	movs	r2, #1
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	fa02 f303 	lsl.w	r3, r2, r3
 80002ce:	461a      	mov	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	4013      	ands	r3, r2
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SwitchGetState+0x24>
		return 1;
 80002d8:	2301      	movs	r3, #1
 80002da:	e000      	b.n	80002de <SwitchGetState+0x26>
	return 0;
 80002dc:	2300      	movs	r3, #0
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3714      	adds	r7, #20
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40020000 	.word	0x40020000

080002f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  DWT_Init();
 80002f4:	f000 f802 	bl	80002fc <DWT_Init>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000300:	4b14      	ldr	r3, [pc, #80]	@ (8000354 <DWT_Init+0x58>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a13      	ldr	r2, [pc, #76]	@ (8000354 <DWT_Init+0x58>)
 8000306:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800030a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800030c:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <DWT_Init+0x58>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	4a10      	ldr	r2, [pc, #64]	@ (8000354 <DWT_Init+0x58>)
 8000312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000316:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000318:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <DWT_Init+0x5c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a0e      	ldr	r2, [pc, #56]	@ (8000358 <DWT_Init+0x5c>)
 800031e:	f023 0301 	bic.w	r3, r3, #1
 8000322:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <DWT_Init+0x5c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a0b      	ldr	r2, [pc, #44]	@ (8000358 <DWT_Init+0x5c>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <DWT_Init+0x5c>)
 8000332:	2200      	movs	r2, #0
 8000334:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000336:	bf00      	nop
    __ASM volatile ("NOP");
 8000338:	bf00      	nop
    __ASM volatile ("NOP");
 800033a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <DWT_Init+0x5c>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	2b00      	cmp	r3, #0
 8000342:	bf0c      	ite	eq
 8000344:	2301      	moveq	r3, #1
 8000346:	2300      	movne	r3, #0
 8000348:	b2db      	uxtb	r3, r3
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000edf0 	.word	0xe000edf0
 8000358:	e0001000 	.word	0xe0001000

0800035c <TimerInit>:
    * PWM center aligned mode: the counter mode must be center aligned counting mode (CMS bits different from '00').
6. Enable the capture compare in CCER.
7. Enable main output in BDTR and Enable the counter.
*/

void TimerInit(void) {
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
    // Enable GPIO clock for port C.6
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000360:	4b24      	ldr	r3, [pc, #144]	@ (80003f4 <TimerInit+0x98>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a23      	ldr	r2, [pc, #140]	@ (80003f4 <TimerInit+0x98>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30
    // Configure PC6 as alternate function mode
    GPIOC->MODER |= (2 << 6*2);
 800036c:	4b22      	ldr	r3, [pc, #136]	@ (80003f8 <TimerInit+0x9c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a21      	ldr	r2, [pc, #132]	@ (80003f8 <TimerInit+0x9c>)
 8000372:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000376:	6013      	str	r3, [r2, #0]
    // Set alternate function as Timer8 output (AF3)
    GPIOC->AFR[0] |= (3 << GPIO_AFRL_AFSEL6_Pos);
 8000378:	4b1f      	ldr	r3, [pc, #124]	@ (80003f8 <TimerInit+0x9c>)
 800037a:	6a1b      	ldr	r3, [r3, #32]
 800037c:	4a1e      	ldr	r2, [pc, #120]	@ (80003f8 <TimerInit+0x9c>)
 800037e:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8000382:	6213      	str	r3, [r2, #32]

    // Enable Timer8 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000384:	4b1b      	ldr	r3, [pc, #108]	@ (80003f4 <TimerInit+0x98>)
 8000386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000388:	4a1a      	ldr	r2, [pc, #104]	@ (80003f4 <TimerInit+0x98>)
 800038a:	f043 0302 	orr.w	r3, r3, #2
 800038e:	6453      	str	r3, [r2, #68]	@ 0x44

    // Set prescaler value
    TIM8->PSC = (TIM_PSC-1);  // Prescaler value
 8000390:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <TimerInit+0xa0>)
 8000392:	220f      	movs	r2, #15
 8000394:	629a      	str	r2, [r3, #40]	@ 0x28
    // Set ARR value to 100 for 10KHz PWM output freq
    TIM8->ARR = (100-1);
 8000396:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <TimerInit+0xa0>)
 8000398:	2263      	movs	r2, #99	@ 0x63
 800039a:	62da      	str	r2, [r3, #44]	@ 0x2c
    // Set CCR value i.e. Duty Cycle (must be less than ARR value)
    TIM8->CCR1 = 1-1;
 800039c:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <TimerInit+0xa0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	635a      	str	r2, [r3, #52]	@ 0x34
    // Configure Timer8 channels as output channel
    //TIM8->CCMR1 &= ~TIM_CCMR1_CC1S;	// default
    // Configure Timer8 channel polarity as active high
    //TIM8->CCER &= ~TIM_CCER_CC1P;		// default
    // Configure Timer8 for output compare mode
    TIM8->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; // PWM Mode 1 => 110
 80003a2:	4b16      	ldr	r3, [pc, #88]	@ (80003fc <TimerInit+0xa0>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a15      	ldr	r2, [pc, #84]	@ (80003fc <TimerInit+0xa0>)
 80003a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80003ac:	6193      	str	r3, [r2, #24]

    // Set the preload bit in CCMRx register
    TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 80003ae:	4b13      	ldr	r3, [pc, #76]	@ (80003fc <TimerInit+0xa0>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a12      	ldr	r2, [pc, #72]	@ (80003fc <TimerInit+0xa0>)
 80003b4:	f043 0308 	orr.w	r3, r3, #8
 80003b8:	6193      	str	r3, [r2, #24]
    // Set the ARPE bit in the CR1 register.
    TIM8->CR1 |= TIM_CR1_ARPE;
 80003ba:	4b10      	ldr	r3, [pc, #64]	@ (80003fc <TimerInit+0xa0>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a0f      	ldr	r2, [pc, #60]	@ (80003fc <TimerInit+0xa0>)
 80003c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003c4:	6013      	str	r3, [r2, #0]
    // Set the PWM edge align mode in the CR1 register.
    //TIM8->CR1 &= ~TIM_CR1_CMS;	// default

    // Configure Timer8 output OCx signal to output pin
    TIM8->CCER |= TIM_CCER_CC1E;
 80003c6:	4b0d      	ldr	r3, [pc, #52]	@ (80003fc <TimerInit+0xa0>)
 80003c8:	6a1b      	ldr	r3, [r3, #32]
 80003ca:	4a0c      	ldr	r2, [pc, #48]	@ (80003fc <TimerInit+0xa0>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6213      	str	r3, [r2, #32]

    // Enable Timer 8 Main output and Timer8 peripheral
    TIM8->BDTR |= TIM_BDTR_MOE;
 80003d2:	4b0a      	ldr	r3, [pc, #40]	@ (80003fc <TimerInit+0xa0>)
 80003d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003d6:	4a09      	ldr	r2, [pc, #36]	@ (80003fc <TimerInit+0xa0>)
 80003d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003dc:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM8->CR1 |= TIM_CR1_CEN;
 80003de:	4b07      	ldr	r3, [pc, #28]	@ (80003fc <TimerInit+0xa0>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a06      	ldr	r2, [pc, #24]	@ (80003fc <TimerInit+0xa0>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6013      	str	r3, [r2, #0]
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40020800 	.word	0x40020800
 80003fc:	40010400 	.word	0x40010400

08000400 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000400:	480d      	ldr	r0, [pc, #52]	@ (8000438 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000402:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000404:	f7ff ff74 	bl	80002f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000408:	480c      	ldr	r0, [pc, #48]	@ (800043c <LoopForever+0x6>)
  ldr r1, =_edata
 800040a:	490d      	ldr	r1, [pc, #52]	@ (8000440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800040c:	4a0d      	ldr	r2, [pc, #52]	@ (8000444 <LoopForever+0xe>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000410:	e002      	b.n	8000418 <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000416:	3304      	adds	r3, #4

08000418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800041c:	d3f9      	bcc.n	8000412 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041e:	4a0a      	ldr	r2, [pc, #40]	@ (8000448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000420:	4c0a      	ldr	r4, [pc, #40]	@ (800044c <LoopForever+0x16>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000424:	e001      	b.n	800042a <LoopFillZerobss>

08000426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000428:	3204      	adds	r2, #4

0800042a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800042c:	d3fb      	bcc.n	8000426 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800042e:	f000 f811 	bl	8000454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000432:	f7ff fec9 	bl	80001c8 <main>

08000436 <LoopForever>:

LoopForever:
  b LoopForever
 8000436:	e7fe      	b.n	8000436 <LoopForever>
  ldr   r0, =_estack
 8000438:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000440:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000444:	080004bc 	.word	0x080004bc
  ldr r2, =_sbss
 8000448:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800044c:	2000001c 	.word	0x2000001c

08000450 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000450:	e7fe      	b.n	8000450 <ADC_IRQHandler>
	...

08000454 <__libc_init_array>:
 8000454:	b570      	push	{r4, r5, r6, lr}
 8000456:	4d0d      	ldr	r5, [pc, #52]	@ (800048c <__libc_init_array+0x38>)
 8000458:	4c0d      	ldr	r4, [pc, #52]	@ (8000490 <__libc_init_array+0x3c>)
 800045a:	1b64      	subs	r4, r4, r5
 800045c:	10a4      	asrs	r4, r4, #2
 800045e:	2600      	movs	r6, #0
 8000460:	42a6      	cmp	r6, r4
 8000462:	d109      	bne.n	8000478 <__libc_init_array+0x24>
 8000464:	4d0b      	ldr	r5, [pc, #44]	@ (8000494 <__libc_init_array+0x40>)
 8000466:	4c0c      	ldr	r4, [pc, #48]	@ (8000498 <__libc_init_array+0x44>)
 8000468:	f000 f818 	bl	800049c <_init>
 800046c:	1b64      	subs	r4, r4, r5
 800046e:	10a4      	asrs	r4, r4, #2
 8000470:	2600      	movs	r6, #0
 8000472:	42a6      	cmp	r6, r4
 8000474:	d105      	bne.n	8000482 <__libc_init_array+0x2e>
 8000476:	bd70      	pop	{r4, r5, r6, pc}
 8000478:	f855 3b04 	ldr.w	r3, [r5], #4
 800047c:	4798      	blx	r3
 800047e:	3601      	adds	r6, #1
 8000480:	e7ee      	b.n	8000460 <__libc_init_array+0xc>
 8000482:	f855 3b04 	ldr.w	r3, [r5], #4
 8000486:	4798      	blx	r3
 8000488:	3601      	adds	r6, #1
 800048a:	e7f2      	b.n	8000472 <__libc_init_array+0x1e>
 800048c:	080004b4 	.word	0x080004b4
 8000490:	080004b4 	.word	0x080004b4
 8000494:	080004b4 	.word	0x080004b4
 8000498:	080004b8 	.word	0x080004b8

0800049c <_init>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	bf00      	nop
 80004a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a2:	bc08      	pop	{r3}
 80004a4:	469e      	mov	lr, r3
 80004a6:	4770      	bx	lr

080004a8 <_fini>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr
