
Day10_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000348  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d0  080004d8  000014d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d0  080004d0  000014d8  2**0
                  CONTENTS
  4 .ARM          00000000  080004d0  080004d0  000014d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d0  080004d8  000014d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d0  080004d0  000014d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004d4  080004d4  000014d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000014d8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f2a  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000042a  00000000  00000000  00002432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00002860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000097  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001814f  00000000  00000000  000029df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001491  00000000  00000000  0001ab2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b81a  00000000  00000000  0001bfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a77d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000208  00000000  00000000  000a781c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a7a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  000a7a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004b8 	.word	0x080004b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080004b8 	.word	0x080004b8

080001c8 <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80001d0:	4b29      	ldr	r3, [pc, #164]	@ (8000278 <LedInit+0xb0>)
 80001d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d4:	4a28      	ldr	r2, [pc, #160]	@ (8000278 <LedInit+0xb0>)
 80001d6:	f043 0308 	orr.w	r3, r3, #8
 80001da:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80001dc:	4b27      	ldr	r3, [pc, #156]	@ (800027c <LedInit+0xb4>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	0052      	lsls	r2, r2, #1
 80001e4:	3201      	adds	r2, #1
 80001e6:	2101      	movs	r1, #1
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	43d2      	mvns	r2, r2
 80001ee:	4611      	mov	r1, r2
 80001f0:	4a22      	ldr	r2, [pc, #136]	@ (800027c <LedInit+0xb4>)
 80001f2:	400b      	ands	r3, r1
 80001f4:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80001f6:	4b21      	ldr	r3, [pc, #132]	@ (800027c <LedInit+0xb4>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	0052      	lsls	r2, r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f202 	lsl.w	r2, r1, r2
 8000204:	4611      	mov	r1, r2
 8000206:	4a1d      	ldr	r2, [pc, #116]	@ (800027c <LedInit+0xb4>)
 8000208:	430b      	orrs	r3, r1
 800020a:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800020c:	4b1b      	ldr	r3, [pc, #108]	@ (800027c <LedInit+0xb4>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	0052      	lsls	r2, r2, #1
 8000214:	3201      	adds	r2, #1
 8000216:	2101      	movs	r1, #1
 8000218:	4091      	lsls	r1, r2
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	0052      	lsls	r2, r2, #1
 800021e:	2001      	movs	r0, #1
 8000220:	fa00 f202 	lsl.w	r2, r0, r2
 8000224:	430a      	orrs	r2, r1
 8000226:	43d2      	mvns	r2, r2
 8000228:	4611      	mov	r1, r2
 800022a:	4a14      	ldr	r2, [pc, #80]	@ (800027c <LedInit+0xb4>)
 800022c:	400b      	ands	r3, r1
 800022e:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000230:	4b12      	ldr	r3, [pc, #72]	@ (800027c <LedInit+0xb4>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	0052      	lsls	r2, r2, #1
 8000238:	3201      	adds	r2, #1
 800023a:	2101      	movs	r1, #1
 800023c:	4091      	lsls	r1, r2
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	0052      	lsls	r2, r2, #1
 8000242:	2001      	movs	r0, #1
 8000244:	fa00 f202 	lsl.w	r2, r0, r2
 8000248:	430a      	orrs	r2, r1
 800024a:	43d2      	mvns	r2, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a0b      	ldr	r2, [pc, #44]	@ (800027c <LedInit+0xb4>)
 8000250:	400b      	ands	r3, r1
 8000252:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 8000254:	4b09      	ldr	r3, [pc, #36]	@ (800027c <LedInit+0xb4>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	2101      	movs	r1, #1
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	43d2      	mvns	r2, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a05      	ldr	r2, [pc, #20]	@ (800027c <LedInit+0xb4>)
 8000266:	400b      	ands	r3, r1
 8000268:	6053      	str	r3, [r2, #4]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	40020c00 	.word	0x40020c00

08000280 <LedOn>:

void LedOn(uint32_t pin) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <LedOn+0x28>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	2101      	movs	r1, #1
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <LedOn+0x28>)
 8000298:	430b      	orrs	r3, r1
 800029a:	6153      	str	r3, [r2, #20]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	40020c00 	.word	0x40020c00

080002ac <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	SystemInit();
 80002b0:	f000 f830 	bl	8000314 <SystemInit>
	LedInit(LED_BLUE);
 80002b4:	200f      	movs	r0, #15
 80002b6:	f7ff ff87 	bl	80001c8 <LedInit>
	LedInit(LED_GREEN);
 80002ba:	200c      	movs	r0, #12
 80002bc:	f7ff ff84 	bl	80001c8 <LedInit>
	LedInit(LED_RED);
 80002c0:	200e      	movs	r0, #14
 80002c2:	f7ff ff81 	bl	80001c8 <LedInit>
	LedInit(LED_ORANGE);
 80002c6:	200d      	movs	r0, #13
 80002c8:	f7ff ff7e 	bl	80001c8 <LedInit>
	TimerInit();
 80002cc:	f000 f858 	bl	8000380 <TimerInit>
	while(1) {
		LedOn(LED_BLUE);
 80002d0:	200f      	movs	r0, #15
 80002d2:	f7ff ffd5 	bl	8000280 <LedOn>
		LedOn(LED_ORANGE);
 80002d6:	200d      	movs	r0, #13
 80002d8:	f7ff ffd2 	bl	8000280 <LedOn>
		LedOn(LED_RED);
 80002dc:	200e      	movs	r0, #14
 80002de:	f7ff ffcf 	bl	8000280 <LedOn>
		LedOn(LED_GREEN);
 80002e2:	200c      	movs	r0, #12
 80002e4:	f7ff ffcc 	bl	8000280 <LedOn>
		TimerDelayMs(3000);
 80002e8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80002ec:	f000 f85e 	bl	80003ac <TimerDelayMs>
		LedOn(LED_BLUE);
 80002f0:	200f      	movs	r0, #15
 80002f2:	f7ff ffc5 	bl	8000280 <LedOn>
		LedOn(LED_ORANGE);
 80002f6:	200d      	movs	r0, #13
 80002f8:	f7ff ffc2 	bl	8000280 <LedOn>
		LedOn(LED_RED);
 80002fc:	200e      	movs	r0, #14
 80002fe:	f7ff ffbf 	bl	8000280 <LedOn>
		LedOn(LED_GREEN);
 8000302:	200c      	movs	r0, #12
 8000304:	f7ff ffbc 	bl	8000280 <LedOn>
		TimerDelayMs(7000);
 8000308:	f641 3058 	movw	r0, #7000	@ 0x1b58
 800030c:	f000 f84e 	bl	80003ac <TimerDelayMs>
		LedOn(LED_BLUE);
 8000310:	bf00      	nop
 8000312:	e7dd      	b.n	80002d0 <main+0x24>

08000314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  DWT_Init();
 8000318:	f000 f802 	bl	8000320 <DWT_Init>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}

08000320 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000324:	4b14      	ldr	r3, [pc, #80]	@ (8000378 <DWT_Init+0x58>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	4a13      	ldr	r2, [pc, #76]	@ (8000378 <DWT_Init+0x58>)
 800032a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800032e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000330:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <DWT_Init+0x58>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	4a10      	ldr	r2, [pc, #64]	@ (8000378 <DWT_Init+0x58>)
 8000336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800033a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800033c:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <DWT_Init+0x5c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a0e      	ldr	r2, [pc, #56]	@ (800037c <DWT_Init+0x5c>)
 8000342:	f023 0301 	bic.w	r3, r3, #1
 8000346:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <DWT_Init+0x5c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a0b      	ldr	r2, [pc, #44]	@ (800037c <DWT_Init+0x5c>)
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000354:	4b09      	ldr	r3, [pc, #36]	@ (800037c <DWT_Init+0x5c>)
 8000356:	2200      	movs	r2, #0
 8000358:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800035a:	bf00      	nop
    __ASM volatile ("NOP");
 800035c:	bf00      	nop
    __ASM volatile ("NOP");
 800035e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000360:	4b06      	ldr	r3, [pc, #24]	@ (800037c <DWT_Init+0x5c>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	2b00      	cmp	r3, #0
 8000366:	bf0c      	ite	eq
 8000368:	2301      	moveq	r3, #1
 800036a:	2300      	movne	r3, #0
 800036c:	b2db      	uxtb	r3, r3
}
 800036e:	4618      	mov	r0, r3
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	e000edf0 	.word	0xe000edf0
 800037c:	e0001000 	.word	0xe0001000

08000380 <TimerInit>:
 *      Author: Nilesh
 */

#include "timer.h"

void TimerInit(void) {
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	// enable timer clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 8000384:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <TimerInit+0x24>)
 8000386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000388:	4a06      	ldr	r2, [pc, #24]	@ (80003a4 <TimerInit+0x24>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6413      	str	r3, [r2, #64]	@ 0x40
	// set prescalar
	TIM7->PSC = TIM_PR-1;
 8000390:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <TimerInit+0x28>)
 8000392:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000396:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40001400 	.word	0x40001400

080003ac <TimerDelayMs>:

void TimerDelayMs(uint32_t ms) {
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	// set number of clocks to count
	uint16_t cnt = (TCLK / 1000) * ms / TIM_PR;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80003ba:	fb02 f303 	mul.w	r3, r2, r3
 80003be:	4a15      	ldr	r2, [pc, #84]	@ (8000414 <TimerDelayMs+0x68>)
 80003c0:	fba2 2303 	umull	r2, r3, r2, r3
 80003c4:	0a9b      	lsrs	r3, r3, #10
 80003c6:	81fb      	strh	r3, [r7, #14]
	TIM7->ARR = cnt - 1;
 80003c8:	89fb      	ldrh	r3, [r7, #14]
 80003ca:	1e5a      	subs	r2, r3, #1
 80003cc:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <TimerDelayMs+0x6c>)
 80003ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	// start count from 0
	TIM7->CNT = 0;
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <TimerDelayMs+0x6c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	625a      	str	r2, [r3, #36]	@ 0x24
	// start timer counter
	TIM7->CR1 |= TIM_CR1_CEN;
 80003d6:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <TimerDelayMs+0x6c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a0f      	ldr	r2, [pc, #60]	@ (8000418 <TimerDelayMs+0x6c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6013      	str	r3, [r2, #0]
	// wait for update interrupt flag
	while(! (TIM7->SR & TIM_SR_UIF))
 80003e2:	bf00      	nop
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <TimerDelayMs+0x6c>)
 80003e6:	691b      	ldr	r3, [r3, #16]
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f9      	beq.n	80003e4 <TimerDelayMs+0x38>
		;
	// clear the update interrupt flag
	TIM7->SR &= ~TIM_SR_UIF;
 80003f0:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <TimerDelayMs+0x6c>)
 80003f2:	691b      	ldr	r3, [r3, #16]
 80003f4:	4a08      	ldr	r2, [pc, #32]	@ (8000418 <TimerDelayMs+0x6c>)
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6113      	str	r3, [r2, #16]
	// stop timer counter
	TIM7->CR1 &= ~TIM_CR1_CEN;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <TimerDelayMs+0x6c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a05      	ldr	r2, [pc, #20]	@ (8000418 <TimerDelayMs+0x6c>)
 8000402:	f023 0301 	bic.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	3714      	adds	r7, #20
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	10624dd3 	.word	0x10624dd3
 8000418:	40001400 	.word	0x40001400

0800041c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800041c:	480d      	ldr	r0, [pc, #52]	@ (8000454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000420:	f7ff ff78 	bl	8000314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000424:	480c      	ldr	r0, [pc, #48]	@ (8000458 <LoopForever+0x6>)
  ldr r1, =_edata
 8000426:	490d      	ldr	r1, [pc, #52]	@ (800045c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000428:	4a0d      	ldr	r2, [pc, #52]	@ (8000460 <LoopForever+0xe>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800042c:	e002      	b.n	8000434 <LoopCopyDataInit>

0800042e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000432:	3304      	adds	r3, #4

08000434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000438:	d3f9      	bcc.n	800042e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043a:	4a0a      	ldr	r2, [pc, #40]	@ (8000464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800043c:	4c0a      	ldr	r4, [pc, #40]	@ (8000468 <LoopForever+0x16>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000440:	e001      	b.n	8000446 <LoopFillZerobss>

08000442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000444:	3204      	adds	r2, #4

08000446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000448:	d3fb      	bcc.n	8000442 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044a:	f000 f811 	bl	8000470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044e:	f7ff ff2d 	bl	80002ac <main>

08000452 <LoopForever>:

LoopForever:
  b LoopForever
 8000452:	e7fe      	b.n	8000452 <LoopForever>
  ldr   r0, =_estack
 8000454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800045c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000460:	080004d8 	.word	0x080004d8
  ldr r2, =_sbss
 8000464:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000468:	2000001c 	.word	0x2000001c

0800046c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800046c:	e7fe      	b.n	800046c <ADC_IRQHandler>
	...

08000470 <__libc_init_array>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	4d0d      	ldr	r5, [pc, #52]	@ (80004a8 <__libc_init_array+0x38>)
 8000474:	4c0d      	ldr	r4, [pc, #52]	@ (80004ac <__libc_init_array+0x3c>)
 8000476:	1b64      	subs	r4, r4, r5
 8000478:	10a4      	asrs	r4, r4, #2
 800047a:	2600      	movs	r6, #0
 800047c:	42a6      	cmp	r6, r4
 800047e:	d109      	bne.n	8000494 <__libc_init_array+0x24>
 8000480:	4d0b      	ldr	r5, [pc, #44]	@ (80004b0 <__libc_init_array+0x40>)
 8000482:	4c0c      	ldr	r4, [pc, #48]	@ (80004b4 <__libc_init_array+0x44>)
 8000484:	f000 f818 	bl	80004b8 <_init>
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	10a4      	asrs	r4, r4, #2
 800048c:	2600      	movs	r6, #0
 800048e:	42a6      	cmp	r6, r4
 8000490:	d105      	bne.n	800049e <__libc_init_array+0x2e>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	f855 3b04 	ldr.w	r3, [r5], #4
 8000498:	4798      	blx	r3
 800049a:	3601      	adds	r6, #1
 800049c:	e7ee      	b.n	800047c <__libc_init_array+0xc>
 800049e:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a2:	4798      	blx	r3
 80004a4:	3601      	adds	r6, #1
 80004a6:	e7f2      	b.n	800048e <__libc_init_array+0x1e>
 80004a8:	080004d0 	.word	0x080004d0
 80004ac:	080004d0 	.word	0x080004d0
 80004b0:	080004d0 	.word	0x080004d0
 80004b4:	080004d4 	.word	0x080004d4

080004b8 <_init>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr

080004c4 <_fini>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	bf00      	nop
 80004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ca:	bc08      	pop	{r3}
 80004cc:	469e      	mov	lr, r3
 80004ce:	4770      	bx	lr
